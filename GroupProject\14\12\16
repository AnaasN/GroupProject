using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace XsAndOs
{
	class Program
	{
        static void Main(string[] args)

        {
            char[,] BoardCoords = new char[4, 4];
            int TurnNumber = 1;
            char WinnerCheck;
            bool XVictory = false;
            bool OVictory = false;
            char Flag;

            TitleBanner();
            //Flag = FlagSetting();

            //Initialisation Ended, begin loop
            while (!XVictory && !OVictory && (TurnNumber <= 9))
            {
                if ((TurnNumber % 2) == 0)
                    Flag = 'x';
                else
                    Flag = 'o';

                InputCoords(Flag, ref BoardCoords);
                DrawBoard(BoardCoords);
                WinnerCheck = (VictoryCheck(BoardCoords));
                
                if (WinnerCheck == 'x')
                {
                    Console.WriteLine("X wins");
                    XVictory = true;
                    DrawSnowMan();
                }
                else if (WinnerCheck == 'o')
                {
                    Console.WriteLine("O wins");
                    OVictory = true;
                    DrawSanta();
                }
                TurnNumber++;
               
            }
        }

        static char FlagSetting()//made redundant by first while loop.
        {
            string PlayerOneSymbol;
            string PlayerTwoSymbol;
            char Flag;

            Console.WriteLine("Player one, choose thy symbol(x or o).");
            PlayerOneSymbol = Console.ReadLine();

            if (PlayerOneSymbol == "x")
            {
                Flag = 'x';
                PlayerTwoSymbol = "o";
            }
            else
            {
                Flag = 'o';
                PlayerTwoSymbol = "x";
            }
            return Flag;
        }

        static void InputCoords(char PlayerSymbol, ref char[,] InBoardCoords)
        {

            int[] OutXYCoords = new int[2];
            int XCoord;
            int YCoord;
            bool UserInputError = false;
            string CoordsUserInput;
            bool InputtingSuccess = false;

            while (!InputtingSuccess)
            {
                Console.WriteLine("Player {0} enter your co-ordinates in x,y; ", PlayerSymbol);
                CoordsUserInput = Console.ReadLine();

                XCoord = 0;
                YCoord = 0;

                try
                {
                    XCoord = ((int)(CoordsUserInput[0]) - 48); //Ascii 48 = 0
                    YCoord = ((int)(CoordsUserInput[2]) - 48);
                }
                catch
                {
                    XCoord = 0;
                    YCoord = 0;
                }
                if (XCoord >= 1 && XCoord <= 3 && YCoord >= 1 && YCoord <= 3)
                    UserInputError = false;
                else
                {
                    UserInputError = true;
                    XCoord = 0;
                    YCoord = 0;
                }
                if (InBoardCoords[XCoord, YCoord] != 'x' && InBoardCoords[XCoord, YCoord] != 'o' && !UserInputError)
                {
                    InputtingSuccess = true;
                    InBoardCoords[XCoord, YCoord] = PlayerSymbol;
                }
                else
                    Console.WriteLine("Invalid Placement");
            }
        }

        static char VictoryCheck(char[,] InBoardCoords)

        {
            char OutVictory = ' ';
            //Rows
            if (InBoardCoords[1, 1] == InBoardCoords[2, 1] && InBoardCoords[2, 1] == InBoardCoords[3, 1])
                OutVictory = InBoardCoords[1, 1];
            else if (InBoardCoords[1, 2] == InBoardCoords[2, 2] && InBoardCoords[2, 2] == InBoardCoords[3, 2])
                OutVictory = InBoardCoords[1, 2];
            else if (InBoardCoords[1, 3] == InBoardCoords[2, 3] && InBoardCoords[2, 3] == InBoardCoords[3, 3])
                OutVictory = InBoardCoords[1, 3];
            //Columns
            else if (InBoardCoords[1, 1] == InBoardCoords[1, 2] && InBoardCoords[1, 2] == InBoardCoords[1, 3])
                OutVictory = InBoardCoords[1, 1];
            else if (InBoardCoords[2, 1] == InBoardCoords[2, 2] && InBoardCoords[2, 2] == InBoardCoords[2, 3])
                OutVictory = InBoardCoords[2, 1];           
            else if (InBoardCoords[3, 1] == InBoardCoords[3, 2] && InBoardCoords[3, 2] == InBoardCoords[3, 3])
                OutVictory = InBoardCoords[3, 2];
            //Diagnol
            else if (InBoardCoords[1, 1] == InBoardCoords[2, 2] && InBoardCoords[2, 2] == InBoardCoords[3, 3])
                OutVictory = InBoardCoords[1, 1];
            else if (InBoardCoords[3, 1] == InBoardCoords[2, 2] && InBoardCoords[2, 2] == InBoardCoords[1, 3])
                OutVictory = InBoardCoords[3, 1];

            Console.WriteLine(OutVictory);
            return OutVictory;

        }

        //Graphics
        static void TitleBanner()
        {
            Console.WriteLine(@"_________________________________________________");
            Console.WriteLine(@"   ___  _  ____  ___ ____ ____  ___ ____ ____    ");
            Console.WriteLine(@"    |   |  |      |  |__| |      |  |  | |___    ");
            Console.WriteLine(@"    |   |  |___   |  |  | |___   |  |__| |___    ");
            Console.WriteLine(@"_________________________________________________");
            Console.WriteLine("By Alan, Orlane and Anaas \n");
        }

        static void DrawBoard(char[,] InBoardCoords)
        {
            //Console.WriteLine("position = {0}", InBoardCoords);
            Console.WriteLine("     |     |         ");
            Console.WriteLine("  {0}  |  {1}  |  {2}", InBoardCoords[1, 1], InBoardCoords[2, 1], InBoardCoords[3, 1]);
            Console.WriteLine("_____|_____|_____    ");
            Console.WriteLine("     |     |         ");
            Console.WriteLine("  {0}  |  {1}  |  {2}", InBoardCoords[1, 2], InBoardCoords[2, 2], InBoardCoords[3, 2]);
            Console.WriteLine("_____|_____|_____    ");
            Console.WriteLine("     |     |         ");
            Console.WriteLine("  {0}  |  {1}  |  {2}", InBoardCoords[1, 3], InBoardCoords[2, 3], InBoardCoords[3, 3]);
            Console.WriteLine("     |     |         ");
        }

        static void DrawSnowMan()
        {
            Console.WriteLine(@"                  ^    ");
            Console.WriteLine(@"        ___      / \   ");
            Console.WriteLine(@"       |   |    /   \  ");
            Console.WriteLine(@"      _|___|_  /     \ ");
            Console.WriteLine(@"       (^_^)   /     \ ");
            Console.WriteLine(@"      (  o  )  /     \ ");
            Console.WriteLine(@"     (   o   )   | |   ");
        }

        static void DrawSanta()
        {
            Console.WriteLine(@"     ____             ");
            Console.WriteLine(@"   {} _  \            ");
            Console.WriteLine(@"      |__ \           ");
            Console.WriteLine(@"     /_____\          ");
            Console.WriteLine(@"     \o o)\)_______   ");
            Console.WriteLine(@"    ( <   ) /#######\ ");
            Console.WriteLine(@"   __{'~` }#########| ");
            Console.WriteLine(@"  /  {   _}_/########|");
            Console.WriteLine(@" /   {  / _|#/ )####| ");
            Console.WriteLine(@"/   \_~/ /_ \  |####| ");
            Console.WriteLine(@"\______\/  \ | |####| ");
            Console.WriteLine(@" \__________\|/#####| ");
            Console.WriteLine(@"  |__[X]_____/ \###/  ");
            Console.WriteLine(@"  /___________\       ");
            Console.WriteLine(@"   |    |/    |       ");
            Console.WriteLine(@"   |___/ |___/        ");
            Console.WriteLine(@"  _|   /_|   /        ");
            Console.WriteLine(@" (___,_(___,_)        ");
        }

　
　
    }

}
